openapi: 3.0.0
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
  description: pet
servers:
  - url: 'http://petstore.swagger.io/v1'
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - Pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
        - schema:
            type: string
          in: query
          name: offset
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - Pets
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/pets/{petId}':
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - Pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Pets:
      title: Pets
      description: A list of pets.
      type: array
      x-tags:
        - Pets
      items:
        $ref: '#/components/schemas/Pet'
    Error:
      title: Error
      type: object
      description: A standard error object.
      x-tags:
        - Common
      properties:
        code:
          type: string
          description: A code.
        message:
          type: string
      required:
        - code
    Pet:
      title: Pet
      description: A single pet.
      type: object
      x-tags:
        - Pets
      xml:
        name: Pet
      properties:
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
        category:
          $ref: '#/components/schemas/Category'
      required:
        - name
        - photoUrls
    Category:
      title: Category
      type: object
      description: ''
      properties:
        name:
          type: string
      required:
        - name
      x-tags:
        - Pets
